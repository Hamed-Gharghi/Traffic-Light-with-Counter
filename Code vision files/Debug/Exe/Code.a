;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Define pins for traffic lights
;#define RED_LED    PORTA.0
;#define YELLOW_LED PORTA.1
;#define GREEN_LED  PORTA.2
;
;// Define pins for 7-segment displays
;#define SEGMENT_PORT_1 PORTC // First 7-segment (units place)
;#define SEGMENT_PORT_2 PORTD // Second 7-segment (tens place)
;#define SEGMENT_DDR_1  DDRC
;#define SEGMENT_DDR_2  DDRD
;
;// Define numbers for 7-segment display (Common Anode)
;const unsigned char segment_numbers[] = {
;    0b11000000, // 0
;    0b11111001, // 1
;    0b10100100, // 2
;    0b10110000, // 3
;    0b10011001, // 4
;    0b10010010, // 5
;    0b10000010, // 6
;    0b11111000, // 7
;    0b10000000, // 8
;    0b10010000  // 9
;};
;
;// Function to display a number on the 7-segment
;void display_number(unsigned char number, unsigned char segment_port) {
; 0000 001E void display_number(unsigned char number, unsigned char segment_port) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001F     if (segment_port == 1) {
;PCODE: $0000000F VOL: 0
;	number -> Y+1
;	segment_port -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0020         SEGMENT_PORT_1 = segment_numbers[number];
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0021     } else if (segment_port == 2) {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0022         SEGMENT_PORT_2 = segment_numbers[number];
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0023     }
; 0000 0024 }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;
;void main(void) {
; 0000 0026 void main(void) {
;PCODE: $00000027 VOL: 0
; 0000 0027     // Define all nedded variables at the beginning of the function
; 0000 0028     unsigned char i, tens, ones;
; 0000 0029 
; 0000 002A     // Configure ports
; 0000 002B     DDRA = 0xFF; // Port A as output for traffic lights
;	i -> R17
;	tens -> R16
;	ones -> R19
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 002C     DDRC = 0xFF; // Port C as output for the first 7-segment (units)
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 002D     DDRD = 0xFF; // Port D as output for the second 7-segment (tens)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002E 
; 0000 002F     while (1) {
;PCODE: $0000002E VOL: 0
; 0000 0030         // Red state (10 seconds)
; 0000 0031         RED_LED = 1;    // Turn on the red LED
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0032         YELLOW_LED = 0; // Turn off the yellow LED
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0033         GREEN_LED = 0;  // Turn off the green LED
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0034         for (i = 10; i > 0; i--) { // Countdown from 10 to 1
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0035             tens = i / 10; // Tens digit
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0036             ones = i % 10; // Units digit
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0037             display_number(ones, 1); // Display units on the first 7-segment
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0038             display_number(tens, 2); // Display tens on the second 7-segment
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0039             delay_ms(1000); // 1-second delay
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 003A         }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 003B 
; 0000 003C         // Green state (10 seconds)
; 0000 003D         RED_LED = 0;    // Turn off the red LED
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 003E         YELLOW_LED = 0; // Turn off the yellow LED
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 003F         GREEN_LED = 1;  // Turn on the green LED
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0040         for (i = 10; i > 0; i--) { // Countdown from 10 to 1
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0041             tens = i / 10; // Tens digit
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0042             ones = i % 10; // Units digit
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0043             display_number(ones, 1); // Display units on the first 7-segment
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0044             display_number(tens, 2); // Display tens on the second 7-segment
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0045             delay_ms(1000); // 1-second delay
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0046         }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0047 
; 0000 0048         // Yellow state (3 seconds)
; 0000 0049         RED_LED = 0;    // Turn off the red LED
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 004A         YELLOW_LED = 1; // Turn on the yellow LED
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 004B         GREEN_LED = 0;  // Turn off the green LED
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 004C         for (i = 3; i > 0; i--) { // Countdown from 3 to 1
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 004D             tens = i / 10; // Tens digit
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 004E             ones = i % 10; // Units digit
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 004F             display_number(ones, 1); // Display units on the first 7-segment
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0050             display_number(tens, 2); // Display tens on the second 7-segment
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0051             delay_ms(1000); // 1-second delay
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0052         }
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0053     }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0054 }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
